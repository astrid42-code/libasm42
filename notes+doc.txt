explications generales completes :
https://medium.com/@leogaudin/libasm-a-guide-to-get-familiar-with-assembly-in-42-830f619f4c5e
https://pageperso.lis-lab.fr/alexis.nasr/Ens/Compilation/cm06_x86.pdf


http://www.lacl.fr/tan/asm
Intro 
Registres Instructions Structures de contrˆole Tableaux Sous programmes Flottants
Les principaux registres 64 bits
rax registre g´en´eral, accumulateur, contient la valeur de retour des fonctions
rbx registre g´en´eral
rcx registre g´en´eral, compteur de boucle
rdx registre g´en´eral, partie haute d’une valeur 128 bits
rsi registre g´en´eral, adresse source pour d´eplacement ou comparaison
rdi registre g´en´eral, adresse destination pour d´eplacement ou comparaison
rsp registre g´en´eral, pointeur de pile (stack pointer)
rbp registre g´en´eral, pointeur de base (base pointer)
r8 registre g´en´eral
r9 registre g´en´eral
...
r15 registre g´en´eral
rip compteur de programme (instruction pointer)

Segmentation de la m´emoire
La m´emoire est divis´ee en segments ind´ependants.
L’adresse de d´ebut de chaque segment est stock´ee dans un
registre.
Chaque segment contient un type particulier de donn´ees.
le segment de donn´ees permet de stocker les variables globales et
les constantes. La taille de ce segment n’´evolue pas au cours de
l’ex´ecution du programme (il est statique).
le segment de code permet de stocker les instructions qui
composent le programme
la pile permet de stocker les variables locales, param`etres de
fonctions et certains r´esultats interm´ediares de calcul
https://pageperso.lis-lab.fr/alexis.nasr/Ens/Compilation/cm06_x86.pdf

instruction loop :
Cette instruction de boucle permet de décrémenter le registre CX (compteur de boucle) de 1
et par la suite de donner le contrôle à une étiquette destinataire tant que le registre CX ne vaut pas 0.
https://www.gladir.com/LEXIQUE/ASM/loop.htm


registres, sous registres, ...:
https://cs.brown.edu/courses/cs033/docs/guides/x64_cheatsheet.pdf
https://www.philadelphia.edu.jo/academics/qhamarsheh/uploads/Lecture%2018%20Conditional%20Jumps%20Instructions.pdf

sections, ...:
https://asm.developpez.com/cours/gas/


exempl d'explications IA
>
section .text
    global ft_strlen

ft_strlen:
    push rbp              ; Sauvegarde la valeur de rbp sur la pile (préparation pour un appel de fonction)
    mov rbp, rsp          ; Restaure rbp avec la valeur de rsp (préparation du cadre de pile)
    xor rcx, rcx          ; Met rcx à zéro. rcx va être utilisé pour compter la longueur de la chaîne

Les premières lignes préparent l'environnement d'exécution de la fonction en sauvegardant le registre rbp et en initialisant rcx à 0. Ce registre rcx sera utilisé comme un compteur pour la longueur de la chaîne.

_loop:
    cmp [rdi], byte 0     ; Compare la valeur à l'adresse pointée par rdi (le caractère actuel) avec 0 (fin de chaîne)
    jz _end               ; Si le caractère est 0 (fin de chaîne), saute à _end
    inc rcx               ; Si le caractère n'est pas 0, incrémente rcx (compteur de la longueur)
    inc rdi               ; Avance au caractère suivant (incrémente le pointeur de la chaîne)
    jmp _loop             ; Retourne au début de la boucle pour comparer le caractère suivant

_end:
    mov rax, rcx          ; Met la valeur de rcx dans rax (retourne la longueur de la chaîne)
    pop rbp               ; Restaure rbp (retour à l'état précédent avant l'appel de fonction)
    ret                   ; Retour de la fonction

La fonction utilise une boucle pour parcourir chaque caractère de la chaîne pointée par le registre rdi. La chaîne est terminée par un \0 (caractère nul), ce qui est la convention en C pour délimiter une chaîne de caractères.

En C, cela ressemble à une fonction qui compte les caractères d'une chaîne de caractères jusqu'à rencontrer le caractère nul \0 :

#include <stddef.h>

size_t ft_strlen(const char *str) {
    size_t length = 0;
    
    while (str[length] != '\0') {
        length++;
    }

    return length;
}
